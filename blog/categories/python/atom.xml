<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | Drinkin gasoline and wine]]></title>
  <link href="http://gleicon.github.com/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://gleicon.github.com/"/>
  <updated>2013-01-01T18:19:16-02:00</updated>
  <id>http://gleicon.github.com/</id>
  <author>
    <name><![CDATA[Gleicon]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Cyclone - a twisted based Tornado implementation]]></title>
    <link href="http://gleicon.github.com/blog/2012/03/15/cyclone-a-twisted-based-tornado-implementation/"/>
    <updated>2012-03-15T23:21:00-03:00</updated>
    <id>http://gleicon.github.com/blog/2012/03/15/cyclone-a-twisted-based-tornado-implementation</id>
    <content type="html"><![CDATA[<h3>Overview</h3>

<p>Some time ago, a company called FriendFeed released <a href="http://www.tornadoweb.org/">Tornado</a>, a neat web application server for python. After some press and unquestionable results it was discussed whether it should have used the Twisted Framework foundation instead of implementing a new ioloop. Long history short, Tornado shares some similarities with <a href="http://twistedmatrix.com/trac/">Twisted</a>, but the programming API is better looking than twisted.web.</p>

<p>After some trials by different people <a href="http://github.com/fiorix">Alex Fiori</a> forked Tornado and bundled it with a Twisted backend and some other goodies - calling it <a href="http://cyclone.io">cyclone</a>. After a while I started using it to build <a href="http://restmq.com">RestMQ</a> and started contributing code for WebSockets and other drivers. There is a lot of sense in combining both worlds as Twisted has an extensive ibrary of protocols and clients, a well defined programming model (like it or not, based on deferreds/futures and generators) and mature cross-platform ioloop implementation. Cyclone's gettext implementation was merged back some time in the past and we constantly merge from upstream on interesting features.</p>

<p>I do most of my coding in python splitting time between cyclone and gevent and right now I gotta say that cyclone has great features that compete in terms of productivity with Tornado.</p>

<p>Code that is build on tornado will run easily after correcting the package names. On the parts related to ioloop, there are the same mapped functionality on twisted - such as timers and pools. To build new protocols you can leverage LineProtocol and other interesting tx classes. The best part is taking advantage of drivers. In an evented loop, if you use a regular driver that can block (pause while waiting for an answer from network or heavy calculation) the other operations are also halted.</p>

<p>If you have a defined programming model to deal with it (which both tornado and twisted defined), it is a matter of yielding at the right moment or using a deferred return to realize the result of the operation later. That can lead to a kind of callback hell both for reading code and profiling it but there are few abstractions that will go far away from it.</p>

<h3>Interesting Cyclone features</h3>

<p><img src="images/cyclone_arch.png" title="Cyclone Architecture" ></p>

<p>Tornado core (ioloop) was changed by a twisted based factory which yield the right reactor. Over this structure the protocol implementation and clients were adapted to use it with minimal to none interface changes.</p>

<p>The most affected module initially was cyclone.web but the whole structure changed and got bundled drivers as mongodb, redis, sqlite and protocols as XMLRPC, JSONRPC, websockets and sse. There is an email module already which can serve as template-to-message app, based on TwistedMail. All these features are natively asynchronous.</p>

<p>Beyond that, a cyclone app is a twisted protocol and can take advantage of the surrounding structure as plugins and PyDirector/cpu affinity. It was easy to merge or create due to the synergy based on already existing twisted applications. There is also an application skeleton and a minimal bottle.py DSL port - both allowing for quickstart web applications.</p>

<p>Much of the authentication and authorization is done over decorators, allowing for clean code - along with the inline deferreds:</p>

<pre><code>class IndexHandler(cyclone.web.RequestHandler):
    @cyclone.web.authenticated  # triggers authentication
    @defer.inlineCallbacks      # allows for inline callbacks
    def get(self):
        result = yield self.do_download()  # inline callback, no need to explicitly added 
        self.write(result)
</code></pre>

<p>That alone may help on the callback spaghetti but it keeps being twisted.</p>

<h3>Evented I/O intermission - is it faster ?</h3>

<p>No. It's just a choice of multiplexer to allow for better time utilization. It helps scaling better the same resources as other approaches such as greenlets over an evented loop (gevent). The most important thing to note is that they are not a substitute for threads of VM limitations. My setups usually are 1 or 2 instances per core, with affinity and a load balance in front of them. This can be done in a different manner as using threadpools or even processes.</p>

<p>Last year I presented at Sao Paulo Perl Workshop and OSCon on this subject and the feedback that I got is that most of the time the very application gets complex so the matter of evented I/O ends up being one of the things that shapes these changes (for good or bad) but not the safeguard or guarantee that the quality will keep up.</p>

<p><div class="embed rich SlideShare"><iframe src="http://www.slideshare.net/slideshow/embed_code/7883101" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen webkitallowfullscreen mozallowfullscreen> </iframe> <div style="margin-bottom:5px"> <strong> <a href="http://www.slideshare.net/gleicon/architecture-by-accident" title="Architecture by Accident" target="_blank">Architecture by Accident</a> </strong> from <strong><a href="http://www.slideshare.net/gleicon" target="_blank">gleicon</a></strong> </div></div></p>

<p><div class="embed rich SlideShare"><iframe src="http://www.slideshare.net/slideshow/embed_code/8728812" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen webkitallowfullscreen mozallowfullscreen> </iframe> <div style="margin-bottom:5px"> <strong> <a href="http://www.slideshare.net/gleicon/oscon-performance-vs-scalability" title="OSCon - Performance vs Scalability" target="_blank">OSCon - Performance vs Scalability</a> </strong> from <strong><a href="http://www.slideshare.net/gleicon" target="_blank">gleicon</a></strong> </div></div></p>

<h3>EOF</h3>

<p>Check the <a href="https://github.com/fiorix/cyclone">code</a> and try it for yourself. I consider that using cyclone is a good and gentle intro to twisted as it sets a clear objective over web applications. There are plenty of good code at the demos directory and the app skeleton already comes up with a bootstrap.css based application boilerplate. Also, send patches.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Agents and Event Listeners for Python]]></title>
    <link href="http://gleicon.github.com/blog/2012/03/04/agents-and-event-listeners-for-python/"/>
    <updated>2012-03-04T19:03:00-03:00</updated>
    <id>http://gleicon.github.com/blog/2012/03/04/agents-and-event-listeners-for-python</id>
    <content type="html"><![CDATA[<p>When modeling a distributed system one might stumble in the Actor model, implemented in one way or another - be it natively on Erlang or a complete library as Akka.</p>

<p>There is a lot of discussion over concurrency models, but regardless the Actor model serves well to break a task between different processes/servers.</p>

<p>Built usually over a messaging channel, these frameworks are usually adapted for a set of tasks.
As it wouldn't be different, some of them had a lot more than I needed, and the frameworks for Python were divided between trying to reimplement Akka or completely different concept.</p>

<p>I took some time out to build <a href="http://github.com/gleicon/mure">Mure</a> to learn more about kombu, a multi-transport library for python. It's a really simple actor library.</p>

<p><div><script src='https://gist.github.com/1975450.js?file='></script>
<noscript><pre><code>   from mure.core import connect, disconnect, worker, send_message             
    from time import sleep                                                      
                                                                                
    @worker('/workers/delicious')                                               
    def a_worker(message):                                                      
        print &quot;received: %s&quot; % message                                          
        send_message('/workers/jazz', 'd-d-d-dance')                            
                                                                                
    @worker('/workers/jazz')                                                    
    def another_worker(message):                                                
        print &quot;received2: %s&quot; % message                                         
        send_message('/workers/delicious', &quot;saaaap&quot;)                            
                                                                                
    @worker('/workers/delicious')                                               
    def third_worker(message):                                                  
        print &quot;the other worker received: %s&quot; % message                         
                                                                                
    if __name__ == &quot;__main__&quot;:                                                  
        connect()                                                               
        send_message('/workers/jazz', 'let it start')                           
        sleep(1)                                                                
        disconnect()      </code></pre></noscript></div>
</p>

<p>The decorator @worker() says that each time that a message to the queue named after the string arrives, the function might be executed having the message as parameter.</p>

<p><img src="images/mure_architecture.png" title="Architecture for Mure" ></p>

<p>After fidling with <a href="https://github.com/jesusabdullah/pyee">pyee</a>, I've implemented an EventEmitter on top of it. The syntax is the same as node.js, but it's a distributed event emitter.</p>

<p><div><script src='https://gist.github.com/1975438.js?file='></script>
<noscript><pre><code>from mure.dee import DistEventEmitter                                                                                                                                             
import os, json, time                                                           
from gevent import sleep, spawn                                                 
                                                                                
dbus = DistEventEmitter()                                                       
                                                                                
def producer():                                                                 
    count =0                                                                    
    while(True):                                                                
        count = count +1                                                        
        print count                                                             
        dbus.emit(&quot;message&quot;, &quot;hnam %d&quot; % count)                                 
        sleep(5)                                                                
                                                                                
                                                                                
def join_listener(msg):                                                         
    print &quot;%s&quot; % msg                                                            
                                                                                
def msg_listener(msg):                                                          
    print &quot;received message: %s&quot; % msg                                          
                                                                                
def main():                                                                     
    dbus.emit('join', &quot;oeam&quot;)                                                   
    dbus.on('message', msg_listener)                                            
    producer()                                                                  
                                                                                
if __name__ == &quot;__main__&quot;:                                                      
    main()</code></pre></noscript></div>

<img src=http://localhost:8080/track?_id=1 width=1 height=1></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Riemann client for python]]></title>
    <link href="http://gleicon.github.com/blog/2012/03/04/reimann-client-for-python/"/>
    <updated>2012-03-04T18:34:00-03:00</updated>
    <id>http://gleicon.github.com/blog/2012/03/04/reimann-client-for-python</id>
    <content type="html"><![CDATA[<p>In the search for the right backend to implement a metrics suited to my projects, I saw that <a href="http://aphyr.github.com/riemann">Riemann</a> (event server built on Closure) would save time by already having all kinds of math related to means, percentiles and a flexible configuration.</p>

<p>The protocol uses Google's Protocol Buffers, but it's very simple (I was able to go from 0 to a simple driver in less than 4 hours - including the protobuf part).
Basic functionality as sending metrics and querying are ready, but the driver still needs polishing - include a connection pool, and a twisted version. As it is right now, it works great with gevent apps.</p>

<p>A basic send/query app would be like this:</p>

<p><div><script src='https://gist.github.com/1975656.js?file='></script>
<noscript><pre><code>from riemann import RiemannClient                                                                                                                                                 
                                                                                
def main():                                                                     
    rc = RiemannClient()                                                        
    rc.send({'host':'127.0.0.1', 'service': 'www', 'state': 'down', 'metric_f': 10000})
    res = rc.query('host')                                                      
    print res                                                                   
    for e in res.events: print e.host                                           
                                                                                
if __name__ == '__main__':                                                      
    main()     </code></pre></noscript></div>
</p>

<p>It supports both tcp and udp transports and includes the proper classes translated from protobuf spec to python. Requires google's protobuf library. The repo is on github <a href="https://github.com/gleicon/pyriemann">pyriemann</a>. There is an examples directory with riemann_health.py, translated from the ruby version to python.</p>
]]></content>
  </entry>
  
</feed>
