<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: reimann | Drinkin gasoline and wine]]></title>
  <link href="http://gleicon.github.com/blog/categories/reimann/atom.xml" rel="self"/>
  <link href="http://gleicon.github.com/"/>
  <updated>2012-03-04T21:33:27-03:00</updated>
  <id>http://gleicon.github.com/</id>
  <author>
    <name><![CDATA[Gleicon]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Riemann client for python]]></title>
    <link href="http://gleicon.github.com/blog/2012/03/04/reimann-client-for-python/"/>
    <updated>2012-03-04T18:34:00-03:00</updated>
    <id>http://gleicon.github.com/blog/2012/03/04/reimann-client-for-python</id>
    <content type="html"><![CDATA[<p>In the search for the right backend to implement a metrics suited to my projects, I saw that <a href="http://aphyr.github.com/riemann">Riemann</a> (event server built on Closure) would save time by already having all kinds of math related to means, percentiles and a flexible configuration.</p>

<p>The protocol uses Google's Protocol Buffers, but it's very simple (I was able to go from 0 to a simple driver in less than 4 hours - including the protobuf part).
Basic functionality as sending metrics and querying are ready, but the driver still needs polishing - include a connection pool, and a twisted version. As it is right now, it works great with gevent apps.</p>

<p>A basic send/query app would be like this:</p>

<pre><code>from riemann import RiemannClient

def main():
    rc = RiemannClient()
    rc.send({'host':'127.0.0.1', 'service': 'www', 'state': 'down', 'metric_f': 10000})
    res = rc.query('host')
    print res
    for e in res.events: print e.host

if __name__ == '__main__':
    main()
</code></pre>

<p>It supports both tcp and udp transports and includes the proper classes translated from protobuf spec to python. Requires google's protobuf library. The repo is on github <a href="https://github.com/gleicon/pyriemann">pyriemann</a>. There is an examples directory with riemann_health.py, translated from the ruby version to python.</p>
]]></content>
  </entry>
  
</feed>
