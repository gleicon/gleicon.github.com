<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: redis | Drinkin gasoline and wine]]></title>
  <link href="http://gleicon.github.com/blog/categories/redis/atom.xml" rel="self"/>
  <link href="http://gleicon.github.com/"/>
  <updated>2013-09-25T15:43:23-03:00</updated>
  <id>http://gleicon.github.com/</id>
  <author>
    <name><![CDATA[Gleicon]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Porting an app from Tornado to Cyclone (quick defer.inlineCallbacks/yield primer)]]></title>
    <link href="http://gleicon.github.com/blog/2012/07/22/porting-an-app-from-tornado-to-cyclone/"/>
    <updated>2012-07-22T21:38:00-03:00</updated>
    <id>http://gleicon.github.com/blog/2012/07/22/porting-an-app-from-tornado-to-cyclone</id>
    <content type="html"><![CDATA[<p>Note: This will probably turn out in a screencast some time or another.</p>

<p>To port an app from <a href="http://tornadoweb.org">Tornado</a> to <a href="http://cyclone.io">Cyclone</a> is an easy task. There are some quirks tho related to Twisted mainly. This is necessary so you can enjoy the environment and async drivers in a proper manner. Tornado is know to provide good abstractions so you can use regular drivers to hook into its IOLoop. But as event loop goes, most of them requires that the whole stack is aware of the cooperative nature between its components. By using twisted you already have that and bundled with cyclone you have Redis, MongoDB, SQLite and other drivers for applications and protocols.</p>

<p>I've found a neat app called <a href="https://github.com/kumarnitin/RedisLive">RedisLive</a> and ported it to cyclone. It is basically a Redis real time resource monitor composed of two parts: a web interface and a daemon to collect data.</p>

<p>To keep it simple and within a reasonable ammount of code to be explained I've just ported the web interface and created a separated data provider. I've started a twisted based metric collector that helped me to fix and add some missing pieces to cyclone redis driver but I wanted to stick with the original collector.</p>

<p>I'll walk out the main parts that were changed. The forked repository is at (my github)[https://github.com/gleicon/RedisLive]. There's a full diff file inside my project.</p>

<p>A good approach to port a web application from Tornado to Cyclone is to tackle the web section, and this is what I did. Inside the folder RedisLive/src/api/controller lives the Controllers for each route listed at RedisLive/src/redis-live.py. So starting by redis-live.py:</p>

<pre><code>diff --git a/src/redis-live.py b/src/redis-live.py
index 43479f4..9318c35 100755
--- a/src/redis-live.py
+++ b/src/redis-live.py
@@ -1,8 +1,8 @@
 #! /usr/bin/env python

-import tornado.ioloop
-import tornado.options
-import tornado.web
+from twisted.internet import reactor
+import cyclone.options
+import cyclone.web

 from api.controller.BaseStaticFileHandler import BaseStaticFileHandler

@@ -15,7 +15,7 @@ from api.controller.TopKeysController import TopKeysController


 # Bootup
-application = tornado.web.Application([
+application = cyclone.web.Application([
   (r"/api/servers", ServerListController),
   (r"/api/info", InfoController),
   (r"/api/memory", MemoryController),
@@ -27,6 +27,6 @@ application = tornado.web.Application([


 if __name__ == "__main__":
-   tornado.options.parse_command_line()
-   application.listen(8888)
-   tornado.ioloop.IOLoop.instance().start()
+  cyclone.options.parse_command_line()
+  reactor.listenTCP(8888, application, interface="127.0.0.1")                 
+  reactor.run()
</code></pre>

<p>Basically it turned into a simple twisted application (not a TAC tho). I've changed package names from tornado.* to cyclone.* and switched from tornado.ioloop to reactor.listenTCP()/reactor.run(). The routing and class structure is the same as we are going to see in the Controllers. Most of the changes are package change (from tornado.web to cyclone.web) and by surrounding the drivers call with yield/defer.inlineCallbacks/defer.returnValue.</p>

<p>The regular way to call a method or function according to the twisted way(tm) is that you receive a Deferred class, in which you attach a callback for success and another for error. By using defer.* and yield code gets more readable without that many callbacks following each external call. The downside is that while you are using this decorator and returnValue, your function returns generators so it gets incompatible with normal functions. So you end up structuring your code around it to save time and in some places you got to stick to regular callbacks to make it compatible to libraries that are ported from a non-twisted code. Bikeshedding apart, is a good resource that Twisted provides.</p>

<pre><code>diff --git a/src/api/controller/BaseStaticFileHandler.py b/src/api/controller/BaseStaticFileHandler.py
index 162fa62..6343a53 100644
--- a/src/api/controller/BaseStaticFileHandler.py
+++ b/src/api/controller/BaseStaticFileHandler.py
@@ -1,6 +1,6 @@
-import tornado.web
+import cyclone.web

-class BaseStaticFileHandler(tornado.web.StaticFileHandler):
+class BaseStaticFileHandler(cyclone.web.StaticFileHandler):
    def compute_etag(self):
        return None
</code></pre>

<p>In this case we didn't need to change anything beyond module names. Now a bit of defer/yield:</p>

<pre><code>diff --git a/src/api/controller/CommandsController.py b/src/api/controller/CommandsController.py
index cd9df26..ac046e3 100644
--- a/src/api/controller/CommandsController.py
+++ b/src/api/controller/CommandsController.py
@@ -1,12 +1,12 @@
 from BaseController import BaseController
-import tornado.ioloop
-import tornado.web
 import dateutil.parser
 from datetime import datetime, timedelta
+from twisted.internet import defer


 class CommandsController(BaseController):

+    @defer.inlineCallbacks
     def get(self):
         """Serves a GET request.
         """
@@ -45,7 +45,7 @@ class CommandsController(BaseController):
           group_by = "second"

         combined_data = []
-        stats = self.stats_provider.get_command_stats(server, start, end,
+        stats = yield self.stats_provider.get_command_stats(server, start, end,
                                                       group_by)
         for data in stats:
             combined_data.append([data[1], data[0]])
</code></pre>

<p>Note that before the "get" method we've added this decorator. If you are using other cyclone decorators, make sure this is the first one (for example if you are using cyclone.web.authenticated and so on). also when using the stats_provider, the call got prepended by yield so the decorator can capture the callback result and make it available to the variable stats without needing an explicit callback (stats = self.stats_provider(...).addCallback(lambda r: do_something(r))).</p>

<p>The rest of diff is at the repository, lets examine the redis stats provider. To be able to keep the original data collector I've cloned RedisLive/src/dataprovider/redisprovider.py into txredisprovider.py. Cyclone comes with txredisapi bundled as a package and I've wanted to use w/o having to rewrite all the calculation code. Ideally I'd have changed the whole class and collector. Most of the changed were addition of yield/defer.inlineCallbacks and specifics of cyclone drivers as transactions (started by driver.multi() instead of pipeline).</p>

<p>It was a quick job spread over two days (1h/2h each day) to have RedisLive working with cyclone, including the twisted part. Twisted is a very mature framework and it's worth knowing the protocols it already provides. Also, the provided reactors and task primitives (look into redis-monitor-tx.tac) are useful to split heavy work into small tasks.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cyclone - a twisted based Tornado implementation]]></title>
    <link href="http://gleicon.github.com/blog/2012/03/15/cyclone-a-twisted-based-tornado-implementation/"/>
    <updated>2012-03-15T23:21:00-03:00</updated>
    <id>http://gleicon.github.com/blog/2012/03/15/cyclone-a-twisted-based-tornado-implementation</id>
    <content type="html"><![CDATA[<h3>Overview</h3>

<p>Some time ago, a company called FriendFeed released <a href="http://www.tornadoweb.org/">Tornado</a>, a neat web application server for python. After some press and unquestionable results it was discussed whether it should have used the Twisted Framework foundation instead of implementing a new ioloop. Long history short, Tornado shares some similarities with <a href="http://twistedmatrix.com/trac/">Twisted</a>, but the programming API is better looking than twisted.web.</p>

<p>After some trials by different people <a href="http://github.com/fiorix">Alex Fiori</a> forked Tornado and bundled it with a Twisted backend and some other goodies - calling it <a href="http://cyclone.io">cyclone</a>. After a while I started using it to build <a href="http://restmq.com">RestMQ</a> and started contributing code for WebSockets and other drivers. There is a lot of sense in combining both worlds as Twisted has an extensive ibrary of protocols and clients, a well defined programming model (like it or not, based on deferreds/futures and generators) and mature cross-platform ioloop implementation. Cyclone's gettext implementation was merged back some time in the past and we constantly merge from upstream on interesting features.</p>

<p>I do most of my coding in python splitting time between cyclone and gevent and right now I gotta say that cyclone has great features that compete in terms of productivity with Tornado.</p>

<p>Code that is build on tornado will run easily after correcting the package names. On the parts related to ioloop, there are the same mapped functionality on twisted - such as timers and pools. To build new protocols you can leverage LineProtocol and other interesting tx classes. The best part is taking advantage of drivers. In an evented loop, if you use a regular driver that can block (pause while waiting for an answer from network or heavy calculation) the other operations are also halted.</p>

<p>If you have a defined programming model to deal with it (which both tornado and twisted defined), it is a matter of yielding at the right moment or using a deferred return to realize the result of the operation later. That can lead to a kind of callback hell both for reading code and profiling it but there are few abstractions that will go far away from it.</p>

<h3>Interesting Cyclone features</h3>

<p><img src="images/cyclone_arch.png" title="Cyclone Architecture" ></p>

<p>Tornado core (ioloop) was changed by a twisted based factory which yield the right reactor. Over this structure the protocol implementation and clients were adapted to use it with minimal to none interface changes.</p>

<p>The most affected module initially was cyclone.web but the whole structure changed and got bundled drivers as mongodb, redis, sqlite and protocols as XMLRPC, JSONRPC, websockets and sse. There is an email module already which can serve as template-to-message app, based on TwistedMail. All these features are natively asynchronous.</p>

<p>Beyond that, a cyclone app is a twisted protocol and can take advantage of the surrounding structure as plugins and PyDirector/cpu affinity. It was easy to merge or create due to the synergy based on already existing twisted applications. There is also an application skeleton and a minimal bottle.py DSL port - both allowing for quickstart web applications.</p>

<p>Much of the authentication and authorization is done over decorators, allowing for clean code - along with the inline deferreds:</p>

<pre><code>class IndexHandler(cyclone.web.RequestHandler):
    @cyclone.web.authenticated  # triggers authentication
    @defer.inlineCallbacks      # allows for inline callbacks
    def get(self):
        result = yield self.do_download()  # inline callback, no need to explicitly added 
        self.write(result)
</code></pre>

<p>That alone may help on the callback spaghetti but it keeps being twisted.</p>

<h3>Evented I/O intermission - is it faster ?</h3>

<p>No. It's just a choice of multiplexer to allow for better time utilization. It helps scaling better the same resources as other approaches such as greenlets over an evented loop (gevent). The most important thing to note is that they are not a substitute for threads of VM limitations. My setups usually are 1 or 2 instances per core, with affinity and a load balance in front of them. This can be done in a different manner as using threadpools or even processes.</p>

<p>Last year I presented at Sao Paulo Perl Workshop and OSCon on this subject and the feedback that I got is that most of the time the very application gets complex so the matter of evented I/O ends up being one of the things that shapes these changes (for good or bad) but not the safeguard or guarantee that the quality will keep up.</p>

<p><div class="embed rich SlideShare"><iframe src="http://www.slideshare.net/slideshow/embed_code/7883101" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen> </iframe> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/gleicon/architecture-by-accident" title="Architecture by Accident" target="_blank">Architecture by Accident</a> </strong> from <strong><a href="http://www.slideshare.net/gleicon" target="_blank">gleicon</a></strong> </div>

</div></p>

<p><div class="embed rich SlideShare"><iframe src="http://www.slideshare.net/slideshow/embed_code/8728812" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen> </iframe> <div style="margin-bottom:5px"> <strong> <a href="https://www.slideshare.net/gleicon/oscon-performance-vs-scalability" title="OSCon - Performance vs Scalability" target="_blank">OSCon - Performance vs Scalability</a> </strong> from <strong><a href="http://www.slideshare.net/gleicon" target="_blank">gleicon</a></strong> </div>

</div></p>

<h3>EOF</h3>

<p>Check the <a href="https://github.com/fiorix/cyclone">code</a> and try it for yourself. I consider that using cyclone is a good and gentle intro to twisted as it sets a clear objective over web applications. There are plenty of good code at the demos directory and the app skeleton already comes up with a bootstrap.css based application boilerplate. Also, send patches.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On that message queue...]]></title>
    <link href="http://gleicon.github.com/blog/2012/03/07/on-that-message-queue-dot-dot-dot/"/>
    <updated>2012-03-07T06:21:00-03:00</updated>
    <id>http://gleicon.github.com/blog/2012/03/07/on-that-message-queue-dot-dot-dot</id>
    <content type="html"><![CDATA[<p>...that you are trying to do with Redis, the answer is NO.</p>

<p>Not by any issue with <a href="http://redis.io">Redis</a> (which I use in a lot of projects and it's a fine piece of software), but because the primitives are not enough to pass as a message broker.</p>

<p>Looking to Redis and <a href="http://www.zeromq.org">ZeroMQ</a> as a message broker in the classic ActiveMQ/RabbitMQ/RestMQ sense is naive, because both are transports (and in Redis case, persistence sometimes) and building blocks that can be attached to systems like these and libraries..</p>

<p>The regular drivers for Redis usually provides no reconnection in case of error or subscribe disconnect, so you probably might end up having your process hanging or if you are lucky, killed with an exception in case of a lost connection. The proper way to do it is to surround Redis with a management layer, as <a href="http://restmq.com">RestMQ</a> or Resque does.</p>

<p>An interesting approach taken on the <a href="https://github.com/fiorix/txredisapi/">twisted redis client</a> is to make use of connection pools which can reconnect. That was the single feature that made RestMQ possible. <a href="https://github.com/ask/kombu">Kombu</a> connections follow the same pattern, abstracting fan outs and routes over a connection pool to Redis, the simples fallback in case you dont want to install any other complex message broker.</p>

<p>Applying only to pub/sub channels without fallback is not a good idea specially if you rely on multiple consumers. On the other hand, for simple one-time no-distributed-locks messaging (as with udp multicas or service discovery), it might be a good choice because: a) there is no persistence and b) if the transport is not available, the processes(or agents) are idle.</p>

<p>The fine line here is the direction of the messages. In a exchange environment, the broker plays the good part of managing the transport shortcomings. On a fire and forget which the messages are importante, the broker helps to keep the message somewhere until it's fetched. Fire and forget of disposable messages might be a good choice to do it if there is no immediate action to be taken and if there is some kind of retransmission/expiring on the sender part. Remember the SMTP protocol.</p>

<p>That's not even touching the cases where a message queue is used as a kind of distributed lock where only one of many similar consumers might get a message, instead of a broadcast scenario.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[memcached backend engines]]></title>
    <link href="http://gleicon.github.com/blog/2012/03/06/memcached-backend-engines/"/>
    <updated>2012-03-06T14:31:00-03:00</updated>
    <id>http://gleicon.github.com/blog/2012/03/06/memcached-backend-engines</id>
    <content type="html"><![CDATA[<p>The memcached protocol is very known and implemented on many languages and frameworks. Its primitives are based around getting and setting values that internally are mapped to keys.</p>

<p>There are two kinds of protocol: ascii and binary. The recommended protocol is the binary protocol, which is modern and has room for new features.</p>

<p>I've been trying my hand at some memcached servers implementations in python, based on twisted and gevent, but looking for some answers regarding the protocol answer, I got a tip that the original memcached server is supporting backend engines through an ANSI C interface. In an insomniac week end I was able to hack around two examples: a filesystem based store and a redis based store.</p>

<p>The <a href="https://github.com/gleicon/memcached_fs_engine">filesystem engine</a> was based entirely on @trondn <a href="http://trondn.blogspot.com/2010/10/writing-your-own-storage-engine-for.html">tutorial</a>. <a href="https://github.com/gleicon/memcached_redis_engine">The Redis engine</a> I made based on my original plan for a <a href="https://github.com/gleicon/tx-memcached-redis">python based memcached server</a>. I've used Redis' hashes to store data and attributes for each memcached key.</p>

<p>To create the hash, the engine issues a command like this:</p>

<blockquote><p>HMSET <keyname> key <keyname> nkey <keyname len> data <data> ndata <data len> flags <flags> exptime <expiration time, if any></p></blockquote>

<p>The advantage of Redis commands being atomic is that INCR, DECR and methods like this are a given. It was a matter of using hiredis to map the right commands. One thing that I'd do differently is to implement a kind of connection pool and configuration options.</p>

<p>To test the backend compliance to the binary protocol I've used <em>memcapable</em>, which usually comes bundled with memcached. The engine must be compiled as a dynamic library so it can be loaded as memcached -E engine.so.</p>

<p>One of the things that I think that having a configurable memcached frontend is good for is to capture metrics. As many frameworks already have a memcached client, it's easy to create an instance and increment/decrement counters on it.</p>
]]></content>
  </entry>
  
</feed>
