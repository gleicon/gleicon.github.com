<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: restmq | Drinkin gasoline and wine]]></title>
  <link href="http://gleicon.github.com/blog/categories/restmq/atom.xml" rel="self"/>
  <link href="http://gleicon.github.com/"/>
  <updated>2013-01-01T18:11:42-02:00</updated>
  <id>http://gleicon.github.com/</id>
  <author>
    <name><![CDATA[Gleicon]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[On that message queue...]]></title>
    <link href="http://gleicon.github.com/blog/2012/03/07/on-that-message-queue-dot-dot-dot/"/>
    <updated>2012-03-07T06:21:00-03:00</updated>
    <id>http://gleicon.github.com/blog/2012/03/07/on-that-message-queue-dot-dot-dot</id>
    <content type="html"><![CDATA[<p>...that you are trying to do with Redis, the answer is NO.</p>

<p>Not by any issue with <a href="http://redis.io">Redis</a> (which I use in a lot of projects and it's a fine piece of software), but because the primitives are not enough to pass as a message broker.</p>

<p>Looking to Redis and <a href="http://www.zeromq.org">ZeroMQ</a> as a message broker in the classic ActiveMQ/RabbitMQ/RestMQ sense is naive, because both are transports (and in Redis case, persistence sometimes) and building blocks that can be attached to systems like these and libraries..</p>

<p>The regular drivers for Redis usually provides no reconnection in case of error or subscribe disconnect, so you probably might end up having your process hanging or if you are lucky, killed with an exception in case of a lost connection. The proper way to do it is to surround Redis with a management layer, as <a href="http://restmq.com">RestMQ</a> or Resque does.</p>

<p>An interesting approach taken on the <a href="https://github.com/fiorix/txredisapi/">twisted redis client</a> is to make use of connection pools which can reconnect. That was the single feature that made RestMQ possible. <a href="https://github.com/ask/kombu">Kombu</a> connections follow the same pattern, abstracting fan outs and routes over a connection pool to Redis, the simples fallback in case you dont want to install any other complex message broker.</p>

<p>Applying only to pub/sub channels without fallback is not a good idea specially if you rely on multiple consumers. On the other hand, for simple one-time no-distributed-locks messaging (as with udp multicas or service discovery), it might be a good choice because: a) there is no persistence and b) if the transport is not available, the processes(or agents) are idle.</p>

<p>The fine line here is the direction of the messages. In a exchange environment, the broker plays the good part of managing the transport shortcomings. On a fire and forget which the messages are importante, the broker helps to keep the message somewhere until it's fetched. Fire and forget of disposable messages might be a good choice to do it if there is no immediate action to be taken and if there is some kind of retransmission/expiring on the sender part. Remember the SMTP protocol.</p>

<p>That's not even touching the cases where a message queue is used as a kind of distributed lock where only one of many similar consumers might get a message, instead of a broadcast scenario.</p>
]]></content>
  </entry>
  
</feed>
